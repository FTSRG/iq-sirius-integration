package org.eclipse.incquery.sirius.interpreter.example.socialnetwork.base.design.patterns

import "http://org.eclipse.incquery.viewmodel.sirius.example.socialnetwork.models/socialnetwork_base"

import "http://www.eclipse.org/emf/2002/Ecore"

/* Example neg find */
pattern womanOver24(woman) {
	Woman.age(woman, age);
	check(age > 24);
}

@Bind(sn="self")
@Return(result="woman")
pattern womanUnder24(woman, sn) {
	neg find womanOver24(woman);
	
	SocialNetwork.members(sn, woman);
	Woman(woman);
}
/* **************** */

/* Example check constraint */
pattern womanOver30(woman) {
	SocialNetwork.members(sn, woman);
	Woman.age(woman, age);
	check(age > 30);
}
/* ************************ */

/* Example find */
pattern findWoman(woman) {
	find woman(woman);
}

// Example type constraint
pattern woman(woman) {
	Woman(woman);
}
/* ************ */

/* Count constraint */
@Bind(sn="self")
@Return(result="woman")
pattern womanWithAtLeast2MaleChildren(woman, sn) {
	SocialNetwork.members(sn, woman);
	
	Woman(woman);
	
	N == count find child(woman, _);
	
	check (N >= 2);
}

pattern child(parent : Person, child : Person) {
	Person.children(parent, child);
	Man(child);
}
/* **************** */

/* Eval constraint */
@Bind(man="self")
@Return(result="name")
pattern manName(man : Man, name) {
	Man.firstName(man, fName);
	Man.lastName(man, lName);
	Man.age(man, age);
	
	name == eval(fName + " " + lName + " : " + age);
}

@Bind(woman="self")
@Return(result="name")
pattern womanName(woman : Woman, name) {
	Woman.firstName(woman, fName);
	Woman.lastName(woman, lName);
	Woman.age(woman, age);
	
	name == eval(fName + " " + lName + " : " + age);
}
/* *************** */


/***** Constraints for presentation *****/
/* Constraints for presentation_1 */
@Bind(sn="self")
@Return(result="woman")
pattern presentation_1(woman : Woman, sn : SocialNetwork) {
	SocialNetwork.members(sn, woman);
	
	Woman(woman);
	
	numberOfDescendants == count find numberOfDescendants(woman, _);
	
	numberOfMaleDescendants == count find numberOfMaleDescendants(woman, _);
	
	check (numberOfDescendants >= 4);
	check (numberOfMaleDescendants >= 3);
}

pattern numberOfDescendants(person : Person, descendant : Person) {
	find descendant+(person, descendant);
}

pattern numberOfMaleDescendants(person : Person, descendant : Person) {
	find descendant+(person, descendant);
	Man(descendant);
}

private pattern descendant(ancestor : Person, descendant : Person) {
	Person.children(ancestor, descendant);
}
/* **************************** */

/* Constraint for friend edge */
@Bind(source="self")
@Return(result="target")
pattern edge_friend(source : Person, target : Person) {
	Person.friends(source, target);
}
/* ************************** */

/* Constraints for presentation_2 */
pattern family(father : Man, mother : Woman) {
	SocialNetwork.members(sn, father);
	SocialNetwork.members(sn, mother);
	
	Man.children(father, child);
	Woman.children(mother, child);
	
	commonChildren == count find commonChild(father, mother, _);
	
	fatherParents == count find parent(father, _);
	
	motherParents == count find parent(mother, _);
	
	check(commonChildren > 0);
	
	check(fatherParents == 0);
	
	check(motherParents == 0);
}

private pattern commonChild(father : Man, mother : Woman, child : Person) {
	Man.children(father, child);
	Woman.children(mother, child);
}

private pattern parent(person : Person, parent : Person) {
	Person.children(parent, person);
}
/* ****************************** */
/* ************************************ */